@page "/connect-device/{DeviceName}"
@using DLMSReader_Multiplatform.Shared.Components.Models
@using DLMSReader_Multiplatform.Shared.Components.Services
@using DLMSReader_Multiplatform.Shared.Components.ViewModels
@using DLMSReader_Multiplatform.Shared.Components.Data
@using Microsoft.Extensions.DependencyInjection
@using Gurux.DLMS.Objects
@inject DeviceDataViewModel ViewModel
@inject DeviceDatabaseService DbService
@inject NavigationManager Nav
@inject ILogService Logger
@inject IJSRuntime JS
@inject IServiceProvider Services

<div class="connect-layout">
    <div class="panels">
        <!-- Levý panel -->
        <aside class="sidebar">
            <!-- Horní část levého panelu -->
            <div class="sidebar-header">
                <button class="btn-load" @onclick="ReadAllObjects">Read all objects</button>
                <button class="btn-load" @onclick="ReadSelectedObject">Read selected object</button>
                <button class="btn-back" @onclick="@(() => Nav.NavigateTo("/"))">Back</button>
                <h5 class="sidebar-title">Objects</h5>
            </div>


            <div class="sidebar-body">
                @if (connectionVM?.GroupedObjects.Count == 0)
                {
                    <p><em>There are no objects to display.</em></p>
                    <p><em>Please read objects first.</em></p>
                }
                else
                {
                    @foreach (var group in connectionVM.GroupedObjects)
                    {
                        <div class="object-group">
                            <div class="object-group-header" @onclick="() => ToggleGroup(group)">
                                <strong>@group.TypeName (@group.Items.Count)</strong>
                            </div>

                            @if (group.IsExpanded)
                            {
                                <ul class="device-list">
                                    @foreach (var obj in group.Items)
                                    {
                                        <li @onclick="() => SelectObject(obj)"
                                            class="@(connectionVM.SelectedObject == obj ? "selected" : "")">
                                            <strong>@obj.LogicalName</strong><br />
                                            <small>@obj.Description</small>
                                        </li>
                                    }
                                </ul>
                            }
                        </div>
                    }
                }
            </div>
        </aside>

        <!-- Panel napravo -->
        <section class="detail-panel">
            <div class="details-body">
                @if (connectionVM?.Device.InterfaceType == Gurux.DLMS.Enums.InterfaceType.WRAPPER)
                {
                    <h4>@($"{connectionVM.Device.Name} | {connectionVM.Device.InterfaceType} | {connectionVM.Device.ServerAddress}:{connectionVM.Device.Port}")</h4>
                }

                @if (connectionVM?.SelectedObject != null)
                {
                    <pre class="object-details">@connectionVM.ObjectDetailsString</pre>
                }
                else
                {
                    <p><em>Choose an object from the list.</em></p>
                }
            </div>

            <div class="log-console" @ref="logRef">
                
                <pre class="log-content">
                    @foreach (var line in Logger.Lines)
                    {
                        @line
                    <br />
                    }
                </pre>
            </div>
        </section>
    </div>
</div>

<style>
    /* --- Log console -------------------------------------------------- */
    .detail-panel {
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        padding: 20px;
        overflow: hidden;
        min-width: 0;
        height: 100%;
        box-sizing: border-box;
    }

    /* oblast s detaily – vyplní zbytek výšky a scrolluje se */
    .details-body {
        flex: 1 1 auto; /* roztáhne se, smí se zmenšovat */
        overflow-y: auto; /* vlastní scroll */
        min-height: 0; /* důležité pro správný flex-scroll */
    }

    /*konzole – drží fixní výšku a nikdy se neposouvá */
    .log-console {
        flex: 0 0 160px; /* 0 grow, 0 shrink, pevná výška 160 px */
        margin-top: 16px;
        background: #111;
        color: white;
        font-family: "Consolas", monospace;
        font-size: 0.75rem;
        line-height: 0.75rem;
        border-radius: 6px;
        padding: 8px;
        box-shadow: inset 0 0 4px rgba(0,0,0,.6);
        overflow-y: auto; /* vlastní scroll, když log přeroste */
        resize: vertical;
    }

    .log-content {
        margin: 0;
        white-space: pre-wrap;
    }


    .connect-layout {
        height: 100vh;
        display: flex;
        flex-direction: column;
    }

    .panels {
        flex: 1;
        display: flex;
        height: 100%;
        overflow: hidden;
    }

    .sidebar {
        width: 240px;
        background: #f9f9f9;
        border-right: 1px solid #ccc;
        display: flex;
        flex-direction: column;
        height: 100%;
        flex-shrink: 0; /* nepovolí zmenšení */
    }

    .sidebar-header {
        padding: 10px;
        border-bottom: 1px solid #ccc;
        flex-shrink: 0;
    }

    .sidebar-body {
        padding: 10px;
        overflow-y: auto;
        flex-grow: 1;
        min-height: 0; /*nutné pro správné scrollování ve flexboxu */
    }

    .btn-load,
    .btn-back {
        width: 100%;
        padding: 8px;
        border: none;
        border-radius: 5px;
        color: #fff;
        font-weight: bold;
        cursor: pointer;
    }

    .btn-load {
        background: mediumseagreen;
        margin-bottom: 5px;
    }

    .btn-back {
        background: firebrick;
    }

    .sidebar-title {
        margin: 8px 0 0;
        font-size: 1rem;
        font-weight: normal;
    }

    .object-group {
        margin-bottom: 3px;
        border: 1px solid #ccc;
        border-radius: 2px;
    }

    .object-group-header {
        background: #eee;
        padding: 8px;
        font-weight: bold;
        white-space: normal;
        font-size: 0.8rem;
        word-wrap: break-word;
        cursor: pointer;
        border-bottom: 1px solid #ccc;
    }

    .device-list {
        list-style: none;
        margin: 0;
        padding: 0;
    }

        .device-list li {
            padding: 10px;
            border-bottom: 1px solid #ddd;
            cursor: pointer;
            transition: background 0.2s ease;
            word-wrap: break-word;
            overflow-wrap: anywhere;
        }

            .device-list li:hover {
                background: #f1f1f1;
            }

            .device-list li.selected {
                background: #d0ebff;
                border-left: 4px solid #339af0;
            }

    .detail-panel {
        flex-grow: 1;
        padding: 20px;
        overflow-y: auto;
        min-width: 0;
        height: 100%;
        box-sizing: border-box;
    }

        .detail-panel h4 {
            margin-top: 0;
            margin-bottom: 1rem;
        }

    .object-details {
        background: #f5f5f5;
        padding: 10px;
        border-radius: 5px;
        overflow-x: auto;
    }
</style>


@code {
    [Parameter] public string DeviceName { get; set; } = "";

    private DeviceConnectionViewModel? connectionVM;

    private ElementReference logRef;
    private bool scrollPending;

    protected override void OnInitialized()
    {
        Logger.LogUpdated += OnLogUpdated;

        var device = ViewModel.AllDevices.FirstOrDefault(d => d.Name == DeviceName);
        if (device != null)
        {
            connectionVM = Services
               .GetRequiredService<DeviceConnectionViewModel>()   // instanci vezme DI
               .WithDevice(device);                               // a tady jí předám Device         //connectionVM = new DeviceConnectionViewModel(device, DbService);
        }
        else
        {
            Nav.NavigateTo("/");
        }
    }

    private void OnLogUpdated()
    {
        scrollPending = true;
        InvokeAsync(StateHasChanged);    // Prerenderujeme vlakno UI...
    }


    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (scrollPending)
        {
            scrollPending = false;
            await JS.InvokeVoidAsync("scrollToEnd", logRef);
        }
    }

    public void Dispose()
        => Logger.LogUpdated -= OnLogUpdated;

    private async Task ReadAllObjects()
    {
        if (connectionVM != null)
        {
            await connectionVM.ConnectToDeviceAsync();
            StateHasChanged();
        }
    }

    private async Task ReadSelectedObject()
    {
        if (connectionVM != null && connectionVM.SelectedObject != null)
        {
            await connectionVM.ReadSelectedObjectAsync();
            connectionVM.GetSelectedObjectText();
            StateHasChanged();
        }
    }

    private void SelectObject(GXDLMSObject obj)
    {
        if (connectionVM != null)
        {
            connectionVM.SelectedObject = obj;
            connectionVM.GetSelectedObjectText();
        }
    }

    private void ToggleGroup(ObjectGroup group)
    {
        group.IsExpanded = !group.IsExpanded;
    }
}
