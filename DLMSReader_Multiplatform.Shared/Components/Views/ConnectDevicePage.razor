@page "/connect-device/{DeviceName}"
@using DLMSReader_Multiplatform.Shared.Components.Models
@using DLMSReader_Multiplatform.Shared.Components.Services
@using DLMSReader_Multiplatform.Shared.Components.ViewModels
@using DLMSReader_Multiplatform.Shared.Components.Data
@using Microsoft.Extensions.DependencyInjection
@using Gurux.DLMS.Objects
@inject DeviceDataViewModel ViewModel
@inject DeviceDatabaseService DbService
@inject NavigationManager Nav
@inject ILogService Logger
@inject IJSRuntime JS
@inject IServiceProvider Services

<div class="connect-layout">

    <nav class="top-bar">
        <button class="btn-top btn-objects" @onclick="ToggleObjectsSidebar">Objects</button>
        <button class="btn-top" @onclick="ReadAllObjects">Read all</button>
        <button class="btn-top" @onclick="ReadSelectedObject">Read selected</button>
        <button class="btn-top btn-back" @onclick="@(() => Nav.NavigateTo("/"))">Back</button>
    </nav>

    <div class="panels">
        <aside class="sidebar @(showObjects ? "open" : "")">
            <div class="sidebar-header desktop-only">
                <h5 class="sidebar-title">Objects</h5>
            </div>

            <div class="sidebar-body">
                @if (connectionVM?.GroupedObjects.Count == 0)
                {
                    <p><em>There are no objects to display.</em></p>
                    <p><em>Please read objects first.</em></p>
                }
                else
                {
                    @foreach (var group in connectionVM.GroupedObjects)
                    {
                        <div class="object-group">
                            <div class="object-group-header" @onclick="() => ToggleGroup(group)">
                                <strong>@group.TypeName (@group.Items.Count)</strong>
                            </div>

                            @if (group.IsExpanded)
                            {
                                <ul class="device-list">
                                    @foreach (var obj in group.Items)
                                    {
                                        <li @onclick="() => SelectObject(obj)"
                                            class="@(connectionVM.SelectedObject == obj ? "selected" : "")">
                                            <strong>@obj.LogicalName</strong><br />
                                            <small>@obj.Description</small>
                                        </li>
                                    }
                                </ul>
                            }
                        </div>
                    }
                }
            </div>
        </aside>

        <section class="detail-panel">
            @if (connectionVM?.Device.InterfaceType == Gurux.DLMS.Enums.InterfaceType.WRAPPER)
            {
                <h4>@($"{connectionVM.Device.Name} | {connectionVM.Device.InterfaceType} | {connectionVM.Device.ServerAddress}:{connectionVM.Device.Port}")</h4>
            }

            <div class="details-body">
                @if (connectionVM?.SelectedObject != null)
                {
                    <pre class="object-details">@connectionVM.ObjectDetailsString</pre>

                    if (connectionVM.SelectedObject is GXDLMSDisconnectControl)
                    {
                        <button class="btn-top" @onclick="() => CallMethod(connectionVM.SelectedObject, 0)">Remote Disconnect</button>
                        <button class="btn-top" @onclick="() => CallMethod(connectionVM.SelectedObject, 1)">Remote Reconnect</button>
                    }
                }
                else
                {
                    <p><em>Choose an object from the list.</em></p>
                }
            </div>

            <div class="log-console" @ref="logRef">
                <pre class="log-content">
                    @foreach (var line in Logger.Lines)
                    {
                        @line

                    <br />
                    }
                </pre>
            </div>
        </section>
    </div>
</div>

<style>
    /* ---------- globalni -------------------------------------------------- */
    * {
        box-sizing: border-box;
    }

    .connect-layout {
        height: 100vh;
        display: flex;
        flex-direction: column;
    }

    /* ---------- horni bar ------------------------------------------------- */
    .top-bar {
        flex: 0 0 48px;
        display: flex;
        gap: 8px;
        align-items: center;
        padding: 0 6px;
        background: #ececec;
        border-bottom: 1px solid #ccc;
    }

    .btn-top {
        padding: 8px 12px;
        border: none;
        border-radius: 5px;
        font-weight: bold;
        color: #fff;
        background: mediumseagreen;
        cursor: pointer;
    }

    .btn-back {
        background: firebrick;
    }

    /* ---------- hlavni kontejnery ---------------------------------------- */
    .panels {
        flex: 1 1 auto;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

    /* ---------- sidebar --------------------------------------------------- */
    .sidebar {
        position: fixed;
        top: 48px;
        left: -280px;
        width: 280px;
        height: calc(100% - 48px);
        background: #f9f9f9;
        overflow-y: auto;
        overflow-x: hidden;
        transition: left .3s ease;
        z-index: 1000;
    }

        .sidebar.open {
            left: 0;
        }

    .sidebar-header {
        padding: 10px;
        border-bottom: 1px solid #ccc;
    }

    .sidebar-body {
        padding: 10px;
    }

    .desktop-only {
        display: none;
    }

    /* ---------- detail + log --------------------------------------------- */
    .detail-panel {
        flex: 1 1 auto;
        padding: 6px;
        display: flex;
        flex-direction: column;
        overflow: hidden;
        min-width: 0;
    }

    .details-body {
        flex: 1 1 auto;
        display: flex;
        overflow: hidden;
        min-height: 0;
    }

    .object-details {
        flex: 1 1 auto;
        overflow: auto;
        background: #f5f5f5;
        padding: 6px;
        border-radius: 5px;
    }

    .log-console {
        flex: 0 0 200px;
        margin-top: 4px;
        background: #111;
        color: #fff;
        font-family: Consolas,monospace;
        font-size: .8rem;
        overflow-y: auto;
        border-radius: 5px;
        padding: 5px;
    }

    .log-content {
        white-space: pre-wrap;
        word-break: break-all;
        overflow-wrap: anywhere;
    }

    /* ---------- Seznam objektu ------------------------------------------- */
    .object-group {
        margin-bottom: 3px;
        border: 1px solid #ccc;
        border-radius: 2px;
    }

    /* Nazvy skupin objektu */
    .object-group-header {
        background: #eee;
        padding: 8px;
        font-weight: bold;
        font-size: .8rem;
        cursor: pointer;
        border-bottom: 1px solid #ccc;
        white-space: normal;
        overflow-wrap: anywhere;
        word-break: break-word;
    }

    .device-list {
        list-style: none;
        margin: 0;
        padding: 0;
        overflow-x: hidden;
    }

        .device-list li {
            padding: 10px;
            border-bottom: 1px solid #ddd;
            cursor: pointer;
            transition: background .2s;
            overflow-wrap: anywhere;
        }

            .device-list li strong,
            .device-list li small {
                white-space: normal;
            }

            .device-list li:hover {
                background: #f1f1f1;
            }

            .device-list li.selected {
                background: #d0ebff;
                border-left: 4px solid #339af0;
            }

    /* ---------- desktop ≥768 px ------------------------------------------ */
    @@media (min-width:768px) {
        .panels {
            flex-direction: row;
        }

        .sidebar {
            position: static;
            left: 0 !important;
            height: 100%;
            width: 240px;
            flex: 0 0 240px;
            min-width: 240px;
            max-width: 240px;
            border-right: 1px solid #ccc;
            transition: none;
        }

        .btn-objects {
            display: none;
        }

        .desktop-only {
            display: block;
        }
    }

    /* ---------- drobnosti ------------------------------------------------- */
    h4 {
        margin: 0 0 4px 0;
    }
</style>

@code {
    [Parameter] public string DeviceName { get; set; } = "";
    private DeviceConnectionViewModel? connectionVM;
    private ElementReference logRef;
    private bool scrollPending;
    private bool showObjects = false;

    protected override void OnInitialized()
    {
        Logger.LogUpdated += OnLogUpdated;
        var device = ViewModel.AllDevices.FirstOrDefault(d => d.Name == DeviceName);
        if (device != null)
            connectionVM = Services.GetRequiredService<DeviceConnectionViewModel>().WithDevice(device);
        else Nav.NavigateTo("/");
    }

    private void ToggleObjectsSidebar() => showObjects = !showObjects;

    private void OnLogUpdated() { scrollPending = true; InvokeAsync(StateHasChanged); }

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (scrollPending) { scrollPending = false; await JS.InvokeVoidAsync("scrollToEnd", logRef); }
    }

    public void Dispose() => Logger.LogUpdated -= OnLogUpdated;

    private async Task ReadAllObjects()
    {
        if (connectionVM != null) { await connectionVM.ConnectToDeviceAsync(); StateHasChanged(); }
    }

    private async Task ReadSelectedObject()
    {
        if (connectionVM?.SelectedObject != null)
        {
            await connectionVM.ReadSelectedObjectAsync();
            connectionVM.GetSelectedObjectText();
            StateHasChanged();
        }
    }

    private async Task CallMethod(GXDLMSObject obj, int methodId)
    {
        //todo
    }

    private void SelectObject(GXDLMSObject obj)
    {
        if (connectionVM != null)
        {
            connectionVM.SelectedObject = obj;
            connectionVM.GetSelectedObjectText();
            showObjects = false;          // zavrit sidebar na mobilu
            StateHasChanged();
        }
    }

    private void ToggleGroup(ObjectGroup group) => group.IsExpanded = !group.IsExpanded;
}
